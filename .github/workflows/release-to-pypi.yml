name: Publish Release to PyPI

on:
  release:
    types: [published]

jobs:
  publish:
    name: Download release assets & publish to Production PyPI
    runs-on: ubuntu-latest

    steps:
      - name: Prepare folder
        run: |
          mkdir -p dist
          ls -la

      - name: Install jq (for parsing release JSON)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Download release assets into dist/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.event.release.tag_name }}"
          REPO="${{ github.repository }}"
          echo "Fetching release info for $REPO tag $TAG"
          release_json=$(curl -sSL -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${REPO}/releases/tags/${TAG}")
          if [ -z "$release_json" ] || [ "$release_json" == "null" ]; then
            echo "Release not found for tag $TAG"; exit 1
          fi
          assets_count=$(echo "$release_json" | jq '.assets | length')
          echo "Found $assets_count assets"
          if [ "$assets_count" -eq 0 ]; then
            echo "No assets attached to the release. Exiting."; exit 1
          fi
          for i in $(seq 0 $((assets_count - 1))); do
            asset_url=$(echo "$release_json" | jq -r ".assets[$i].url")
            asset_name=$(echo "$release_json" | jq -r ".assets[$i].name")
            echo "Downloading $asset_name ..."
            # Accept header required to get binary
            curl -sSL -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" "$asset_url" -o "dist/${asset_name}"
            echo "Saved dist/${asset_name}"
          done
          ls -la dist

      - name: Set up Python (upload)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install twine
        run: python -m pip install --upgrade pip && python -m pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -z "$(ls -A dist)" ]; then echo "No files in dist/"; exit 1; fi
          python -m twine upload --non-interactive dist/*
